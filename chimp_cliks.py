# -*- coding: utf-8 -*-
"""CHIMP_CLIKS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Csfpbn8dn24AEv65cEREQfTay_tEtLib
"""

import gradio as gr
import random
import time
import pandas as pd

paragraphs = [
    "The quick brown fox jumps over the lazy dog. Itâ€™s a classic sentence...",
    "Typing speed is an essential skill in todayâ€™s fast-paced digital world...",
    "In a world where technology continues to advance...",
    "Consistency is the key to improvement...",
    "The journey of learning to type well is often underestimated..."
]

start_time = 0
target_text = ""
live_wpm = 0
accuracy = 0
is_running = False
leaderboard_data = pd.DataFrame(columns=["Player", "WPM", "Accuracy"])


def start_game(player_name):
    global target_text, start_time, live_wpm, accuracy, is_running
    if player_name.strip() == "":
        return "Please enter your name to start the game.", "", "", "", leaderboard_data

    target_text = random.choice(paragraphs)
    start_time = time.time()
    live_wpm, accuracy = 0, 0
    is_running = True
    return target_text, "", "Live WPM: 0 | Accuracy: 0% | Time: 0s", "", leaderboard_data


def refresh_game():

    return start_game("")


def update_stats(typed_input, player_name):
    global live_wpm, accuracy, is_running, leaderboard_data

    if not is_running or player_name.strip() == "":
        return "", "Game not running. Please start a new game.", leaderboard_data

    elapsed_time = max(time.time() - start_time, 1)
    num_words = len(typed_input.split())
    live_wpm = (num_words / elapsed_time) * 60

    typed_words = typed_input.split()
    target_words = target_text.split()
    correct_words = sum(1 for tw, tt in zip(typed_words, target_words) if tw == tt)
    accuracy = (correct_words / len(target_words)) * 100 if target_words else 0


    typed_text_display = "".join(
        f'<span style="color:{"green" if i < len(target_text) and char == target_text[i] else "red"}">{char}</span>'
        for i, char in enumerate(typed_input)
    )
    if len(typed_input) < len(target_text):
        typed_text_display += f'<span style="color:grey">{target_text[len(typed_input):]}</span>'


    if typed_input == target_text:
        is_running = False
        leaderboard_entry = pd.DataFrame({"Player": [player_name], "WPM": [live_wpm], "Accuracy": [accuracy]})
        leaderboard_data = pd.concat([leaderboard_data, leaderboard_entry], ignore_index=True)
        game_summary = f"Finished! Player: {player_name} | WPM: {live_wpm:.2f} | Accuracy: {accuracy:.2f}% | Time: {elapsed_time:.2f}s"
        return typed_text_display, game_summary, leaderboard_data


    ongoing_stats = f"Live WPM: {live_wpm:.2f} | Accuracy: {accuracy:.2f}% | Time: {elapsed_time:.2f}s"
    return typed_text_display, ongoing_stats, leaderboard_data


with gr.Blocks() as app:
    gr.Markdown("# ðŸš€ CHIMP_CLICKS")
    gr.Markdown("**Try your typing skills! Type the paragraph as fast as you can while maintaining accuracy.**")

    player_name_input = gr.Textbox(label="Enter Your Name:", placeholder="Type your name here")
    start_button = gr.Button("Start Game", variant="primary")
    refresh_button = gr.Button("Refresh Game")

    text_output = gr.HTML(label="Paragraph")
    typing_box = gr.Textbox(label="Type the paragraph here", placeholder="Start typing here...")
    stats_output = gr.Textbox(label="Live Stats", interactive=False)
    summary_output = gr.Textbox(label="Game Summary", interactive=False)

    leaderboard = gr.DataFrame(value=leaderboard_data, headers=["Player", "WPM", "Accuracy"], datatype=["str", "number", "number"], interactive=False)


    start_button.click(fn=start_game, inputs=player_name_input, outputs=[text_output, typing_box, stats_output, summary_output, leaderboard], queue=False)
    refresh_button.click(fn=refresh_game, outputs=[text_output, typing_box, stats_output, summary_output, leaderboard], queue=False)
    typing_box.change(fn=update_stats, inputs=[typing_box, player_name_input], outputs=[text_output, stats_output, leaderboard])


app.launch()

